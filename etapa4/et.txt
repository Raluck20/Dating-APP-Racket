(define (get-unstable-couples engagements mpref wpref)
  (let ((unstable-couples '()))
    (map (lambda (couple)
           (cond ((better-match-exists? (car couple) (cdr couple) (get-pref-list wpref (car couple)) mpref (map (lambda (x) (cons (cdr x) (car x))) engagements))
               (set! unstable-couples (cons couple unstable-couples))
               )
           ((better-match-exists? (cdr couple) (car couple) (get-pref-list mpref (cdr couple)) wpref engagements)
               (set! unstable-couples (cons (cons (car couple) (cdr couple)) unstable-couples))
               )))
         engagements)
    unstable-couples))


(define (get-unstable-couples engagements mpref wpref)
  (let ((unstable-couples '()))
    (map (lambda (couple) (let* ((a (car couple)) (b (cdr couple)))
           (cond ((better-match-exists? a b (get-pref-list wpref a) mpref (map (lambda (x) (cons (cdr x) (car x))) engagements))
               (set! unstable-couples (cons couple unstable-couples))
               )
           ((better-match-exists? b a (get-pref-list mpref b) wpref engagements)
               (set! unstable-couples (cons (cons a b) unstable-couples))
               ))))
         engagements)
    unstable-couples))

(define (get-unstable-couples engagements mpref wpref)
  (let ((unstable-couples '()))
    (map (lambda (couple) (let* ((a (car couple)) (b (cdr couple)))
           (cond ((better-match-exists? a b (get-pref-list wpref a) mpref (map (lambda (x) (let* ((xd (cdr x)) (xa (car x))) (cons xd xa))) engagements))
               (set! unstable-couples (cons couple unstable-couples))
               )
           ((better-match-exists? b a (get-pref-list mpref b) wpref engagements)
               (set! unstable-couples (cons (cons a b) unstable-couples))
               ))))
         engagements)
    unstable-couples))
